import './SchedulePage.css'
import React, { useState, useCallback, useEffect } from 'react'
import { BaseWidget } from '../../../components/base/BaseWidget'
import { Label } from '../../../components/labels/Label'
import { SearchInput } from '../../../components/SearchInput/SearchInput'
import { Button } from '../../../components/buttons/Button'
import { TimetableWidget } from '../../../components/business/timetable/TimetableWidget'
import type { Student } from '@shared/types'
import { useStudents, useStudentSearch, useStudentTimetable } from '../hooks'
import { TimetableEditModal } from '../components/TimetableEditModal'

function SchedulePage() {
  // 학생 목록 관리
  const { students, isLoading, error, loadStudents } = useStudents()
  
  // 학생 검색 및 필터링
  const {
    searchValue,
    filters,
    searchResults,
    isSearching,
    searchError,
    handleSearch,
    handleFilter
  } = useStudentSearch(students)

  // 선택된 학생 상태
  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null)

  // 학생 시간표 관리
  const {
    timetableData,
    isLoading: isTimetableLoading,
    error: timetableError,
    loadTimetable
  } = useStudentTimetable()

  // 학생 선택 시 시간표 로드
  useEffect(() => {
    if (selectedStudent) {
      loadTimetable(selectedStudent)
    }
  }, [selectedStudent, loadTimetable])

  // 학생 선택 핸들러
  const handleStudentSelect = useCallback((student: Student) => {
    setSelectedStudent(student)
    console.log('학생 선택:', student)
  }, [])

  // 시간표 편집 핸들러
  const handleEditTimetable = useCallback(() => {
    console.log('시간표 편집')
    // 나중에 실제 추가 로직 구현
  }, [])

  // 모달 상태 관리
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)

  // 모달 열기/닫기 핸들러
  const handleOpenEditModal = useCallback(() => {
    setIsEditModalOpen(true)
  }, [])

  const handleCloseEditModal = useCallback(() => {
    setIsEditModalOpen(false)
  }, [])

  // 시간표 저장 핸들러
  const handleSaveTimetable = useCallback(() => {
    console.log('시간표 저장 완료, 시간표 새로고침')
    
    // 선택된 학생의 시간표를 새로고침
    if (selectedStudent) {
      loadTimetable(selectedStudent)
    }
  }, [selectedStudent, loadTimetable])

  // 에러 상태 결정 (학생 목록 에러, 검색 에러, 또는 시간표 에러)
  const currentError = error || searchError || timetableError
  const currentIsLoading = isLoading || isSearching || isTimetableLoading

  return (
    <BaseWidget className="schedule-page">
      {/* 검색 및 필터 섹션 */}
      <div className="search-filter-section">
        <div className="search-container">
          <SearchInput 
            placeholder="학생 이름 검색"
            value={searchValue}
            onChange={handleSearch}
            onSearch={handleSearch}
            variant="pill"
            showIcon={true}
            size="md"
          />
        </div>
        
        <div className="filter-buttons">
          <select 
            value={filters.grade} 
            onChange={(e) => handleFilter('grade', e.target.value)}
            className="filter-select"
          >
            <option value="">전체 학년</option>
            <option value="중1">중1</option>
            <option value="중2">중2</option>
            <option value="중3">중3</option>
            <option value="고1">고1</option>
            <option value="고2">고2</option>
            <option value="고3">고3</option>
          </select>
        </div>
      </div>

      {/* 메인 콘텐츠 */}
      <div className="schedule-content">
        {/* 왼쪽 패널 - 학생 목록 */}
        <div className="student-panel">
          <div className="panel-section">
            <Label variant="heading" size="medium" className="section-title">
              학생 목록
            </Label>
            
            {currentIsLoading ? (
              <div className="loading-state">
                <Label variant="secondary" size="medium">
                  {isLoading ? '학생 목록을 불러오는 중...' : 
                   isSearching ? '검색 중...' : '시간표를 불러오는 중...'}
                </Label>
              </div>
            ) : currentError ? (
              <div className="error-state">
                <Label variant="secondary" size="medium" className="error-text">{currentError}</Label>
                <Button 
                  onClick={loadStudents}
                  variant="secondary"
                  size="small"
                  className="retry-btn"
                >
                  다시 시도
                </Button>
              </div>
            ) : searchResults.length === 0 ? (
              <div className="empty-state">
                <Label variant="secondary" size="medium">
                  {searchValue.trim() ? '검색 결과가 없습니다.' : '등록된 학생이 없습니다.'}
                </Label>
              </div>
            ) : (
              <div className="student-list">
                {searchResults.map((student) => (
                  <div 
                    key={student.id} 
                    className={`student-item ${selectedStudent?.id === student.id ? 'selected' : ''}`}
                    onClick={() => handleStudentSelect(student)}
                  >
                    <div className="student-item-header">
                      <div className="student-item-name">
                        {student.name}
                      </div>
                      <span className={`student-status ${student.status}`}>
                        {student.status === 'active' ? '활성' : 
                         student.status === 'inactive' ? '비활성' : '완료'}
                      </span>
                    </div>
                    <div className="student-item-details">
                      <div className="detail-row">
                        <span className="detail-label">학년:</span>
                        <span className="detail-value">{student.grade}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* 오른쪽 패널 - 선택된 학생 시간표 정보 */}
        <div className="student-detail-panel">
          <div className="detail-header">
            <div className="detail-header-content">
              <div className="detail-title-section">
                <Label variant="heading" size="medium" className="section-title">
                  {selectedStudent ? `${selectedStudent.name} 시간표 정보` : '학생 시간표 정보'}
                </Label>
                <Label variant="secondary" size="small" className="detail-subtitle">
                  {selectedStudent ? `${selectedStudent.grade} | ${selectedStudent.status === 'active' ? '활성' : '비활성'}` : '좌측에서 학생을 선택하세요'}
                </Label>
              </div>
              
              {/* 시간표 편집 버튼 - 학생이 선택되었을 때만 표시 */}
              {selectedStudent && (
                <Button 
                  onClick={handleOpenEditModal}
                  className="edit-timetable-btn"
                  variant="primary"
                  size="small"
                >
                  시간표 편집
                </Button>
              )}
            </div>
          </div>
          
          <div className="detail-content">
            {selectedStudent ? (
              <div className="student-detail-info">
                {isTimetableLoading ? (
                  <div className="timetable-loading">
                    <Label variant="secondary" size="medium">시간표를 불러오는 중...</Label>
                  </div>
                ) : timetableError ? (
                  <div className="timetable-error">
                    <Label variant="secondary" size="medium" className="error-text">{timetableError}</Label>
                    <Button 
                      onClick={() => loadTimetable(selectedStudent)}
                      variant="secondary"
                      size="small"
                      className="retry-btn"
                    >
                      다시 시도
                    </Button>
                  </div>
                ) : (
                  <div className="timetable-widget-container">
                    <TimetableWidget 
                      data={timetableData.timetableGrid}
                      className="student-timetable-widget"
                    />
                  </div>
                )}
              </div>
            ) : (
              <div className="empty-detail">
                <Label variant="secondary" size="medium">
                  학생을 선택하면 시간표 정보가 표시됩니다.
                </Label>
              </div>
            )}
          </div>
        </div>
      </div>
      
      {/* 시간표 편집 모달 */}
      <TimetableEditModal
        isOpen={isEditModalOpen}
        onClose={handleCloseEditModal}
        student={selectedStudent}
        onSave={handleSaveTimetable}
      />
    </BaseWidget>
  )
}

export default SchedulePage
